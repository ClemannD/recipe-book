import { UserButton, useUser } from '@clerk/nextjs';
import Head from 'next/head';
import Link from 'next/link';
import { Button } from './ui/button';

const Layout = (props: { children: React.ReactNode; title?: string }) => {
  const user = useUser();
  const router = useRouter();

  const [isMenuOpen, setIsMenuOpen] = useState(false);

  useEffect(() => {
    setIsMenuOpen(false);
  }, [router.pathname]);

  return (
    <>
      <Head>
        <title>{props.title ?? 'Home'} | Recipe Book</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link
          rel="icon"
          href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22>
              <text y=%22.9em%22 font-size=%2290%22>
                🥘
              </text>
            </svg>"
        ></link>
      </Head>

      <div className="flex flex-col lg:flex-row">
        <div
          className={clsx(
            'fixed z-20 w-full flex-col justify-between overflow-hidden bg-white px-2 py-0 shadow-lg  transition-all duration-500 ease-in-out lg:static lg:w-[14rem] lg:min-w-[14rem] lg:flex-col lg:justify-start',
            isMenuOpen ? 'h-screen' : 'h-16 lg:h-screen'
          )}
        >
          <div className="flex  justify-between lg:flex-col">
            <Link href="/">
              <div className="flex h-16 items-center justify-center lg:h-auto lg:flex-col lg:py-6">
                <p className="mr-2 text-xl lg:mb-4 lg:mr-0 lg:text-5xl">
                  🥘 📖
                </p>
                <h1 className="text-lg font-bold lg:text-3xl">Recipe Book</h1>
              </div>
            </Link>

            <div className="flex h-16 items-center justify-center lg:h-20">
              {user.isSignedIn ? (
                <>
                  <div className="hidden lg:flex lg:items-center">
                    <UserButton />{' '}
                    <div className="ml-3 ">{user.user?.fullName}</div>
                  </div>
                  <div
                    className="lg:hidden"
                    onClick={() => {
                      setIsMenuOpen(!isMenuOpen);
                    }}
                  >
                    {isMenuOpen ? (
                      <XIcon className="h-6 w-6" />
                    ) : (
                      <MenuIcon className="h-6 w-6" />
                    )}
                  </div>
                  <HouseholdDialog />
                </>
              ) : (
                <Link href="/sign-in" passHref>
                  <Button className="max-w-96 w-full">Sign In/Up</Button>
                </Link>
              )}
            </div>
          </div>

          <div
            className={clsx(
              'flex-col  items-center justify-center gap-y-3 py-6 ',
              isMenuOpen ? 'flex' : 'hidden lg:flex'
            )}
          >
            <div className="mb-4 flex items-center lg:hidden">
              <UserButton /> <div className="ml-3 ">{user.user?.fullName}</div>
            </div>
            <NavItem href="/shared-recipes">Shared Recipes</NavItem>
            {user.isSignedIn && (
              <>
                <NavItem href="/recipes">Your Recipes</NavItem>
                <NavItem href="/meal-plans">Meal Plans</NavItem>
                <NavItem href="/recipe-types">Recipe Types</NavItem>
              </>
            )}
          </div>
        </div>

        <div className="max-h-screen flex-grow overflow-x-hidden lg:overflow-y-auto">
          {props.children}
        </div>
      </div>
    </>
  );
};

const NavItem = (props: { href: string; children: React.ReactNode }) => {
  return (
    <Link
      href={props.href}
      className="flex h-10 w-full items-center justify-center rounded px-4 text-lg font-medium text-slate-900 transition-colors ease-in-out hover:bg-slate-200"
    >
      {props.children}
    </Link>
  );
};

export default Layout;

import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from './ui/dialog';
import { Form, Formik } from 'formik';
import { toFormikValidationSchema } from 'zod-formik-adapter';
import { z } from 'zod';
import { api } from '../utils/api';
import Input from './forms/input';
import { useEffect, useState } from 'react';
import { MenuIcon, XIcon } from 'lucide-react';
import clsx from 'clsx';
import { useRouter } from 'next/router';

export function HouseholdDialog() {
  const [isOpen, setIsOpen] = useState(false);

  const {
    data: household,
    isFetched,
    refetch,
  } = api.household.getCurrentUserHousehold.useQuery();

  const { mutate: createHousehold, isLoading: isCreatingHousehold } =
    api.household.createHousehold.useMutation({
      onSuccess: async () => {
        await refetch();
      },
    });

  useEffect(() => {
    if (isFetched) {
      setIsOpen(!household);
    }
  }, [household, isFetched]);

  const householdFormSchema = z.object({
    householdName: z.string().min(1),
  });

  return (
    <Dialog open={isOpen}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Create a Household</DialogTitle>
          <DialogDescription>
            A household is a group of people who share recipes and meal plans.
            Recipes made under a household are private to the household by
            default, but can be set to be shared publicly.
            <br />
            <br />
            Once you create a household, you can invite others to join (This
            feature is coming soon).
          </DialogDescription>
        </DialogHeader>

        <Formik
          initialValues={{
            householdName: '',
          }}
          validationSchema={toFormikValidationSchema(householdFormSchema)}
          onSubmit={(values) => {
            createHousehold(values);
          }}
        >
          <Form>
            <Input label="🏡 Household Name" name="householdName"></Input>

            <DialogFooter>
              <Button type="submit" isSubmitting={isCreatingHousehold}>
                Create
              </Button>
            </DialogFooter>
          </Form>
        </Formik>
      </DialogContent>
    </Dialog>
  );
}
